{"ast":null,"code":"var _jsxFileName = \"/home/mark/GIT/exp-tree/src/ExpNodePartView.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ExpNodePartView(props) {\n  const optionNames = props.options;\n  const selectedItem = optionNames.indexOf(props.selected); // naughty ... (the 'any' here - forgive me!)\n\n  const handleSelect = event => {\n    event.preventDefault();\n    let value = parseInt(event.target.value);\n    const optionChosen = optionNames[value];\n    props.onSelect(optionChosen);\n  };\n\n  const createOption = (s, k) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      className: 'option-txt md-font',\n      value: k,\n      children: s\n    }, k, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"option-txt md-font\",\n    size: 1,\n    onChange: handleSelect,\n    value: selectedItem,\n    children: optionNames.map(createOption)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n}\n_c = ExpNodePartView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpNodePartView\");","map":{"version":3,"sources":["/home/mark/GIT/exp-tree/src/ExpNodePartView.tsx"],"names":["ExpNodePartView","props","optionNames","options","selectedItem","indexOf","selected","handleSelect","event","preventDefault","value","parseInt","target","optionChosen","onSelect","createOption","s","k","map"],"mappings":";;AAaA,OAAO,SAASA,eAAT,CAAyBC,KAAzB,EACP;AACC,QAAMC,WAAW,GAAGD,KAAK,CAACE,OAA1B;AACA,QAAMC,YAAY,GAAGF,WAAW,CAACG,OAAZ,CAAoBJ,KAAK,CAACK,QAA1B,CAArB,CAFD,CAIC;;AACA,QAAMC,YAAY,GAAIC,KAAD,IACrB;AACCA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,KAAK,GAAGC,QAAQ,CAACH,KAAK,CAACI,MAAN,CAAaF,KAAd,CAApB;AAEA,UAAMG,YAAY,GAAGX,WAAW,CAACQ,KAAD,CAAhC;AACAT,IAAAA,KAAK,CAACa,QAAN,CAAeD,YAAf;AACA,GAPD;;AASA,QAAME,YAAY,GAAG,CAACC,CAAD,EAAYC,CAAZ,KACrB;AACC,wBACC;AACC,MAAA,SAAS,EAAE,oBADZ;AAGC,MAAA,KAAK,EAAEA,CAHR;AAAA,gBAKED;AALF,OAEMC,CAFN;AAAA;AAAA;AAAA;AAAA,YADD;AASA,GAXD;;AAaA,sBACC;AAAQ,IAAA,SAAS,EAAC,oBAAlB;AACC,IAAA,IAAI,EAAE,CADP;AAEC,IAAA,QAAQ,EAAEV,YAFX;AAGC,IAAA,KAAK,EAAEH,YAHR;AAAA,cAKGF,WAAW,CAACgB,GAAZ,CAAgBH,YAAhB;AALH;AAAA;AAAA;AAAA;AAAA,UADD;AASA;KArCef,e","sourcesContent":["// Shows the UI 'node' part of an Exp,  \n// (the box on the UI with the name of the operator or constant, in it) e.g. \n// |And   |, |Xor   | |True  |, etc.\n// These 'nodes'also have an associated drop-down menu, which enables a new node\n// to be selected to replace the current.\n\ninterface Props\n{\t\n\tonSelect:\t(s: string) => void;\n\toptions:\tstring[];\n\tselected:\tstring;\n}\n\nexport function ExpNodePartView(props: Props)\n{\n\tconst optionNames = props.options;\n\tconst selectedItem = optionNames.indexOf(props.selected);\n\t\n\t// naughty ... (the 'any' here - forgive me!)\n\tconst handleSelect = (event: any): void =>\n\t{\n\t\tevent.preventDefault();\n\t\tlet value = parseInt(event.target.value) as number;\n\n\t\tconst optionChosen = optionNames[value];\n\t\tprops.onSelect(optionChosen);\n\t}\n\n\tconst createOption = (s: string, k: number) =>\n\t{\n\t\treturn (\n\t\t\t<option\n\t\t\t\tclassName={'option-txt md-font'}\n\t\t\t\tkey={k}\n\t\t\t\tvalue={k}\n\t\t\t> \n\t\t\t\t{s} \n\t\t\t</option>\n\t\t);\n\t}\n\n\treturn (\n\t\t<select className='option-txt md-font'\n\t\t\tsize={1} \n\t\t\tonChange={handleSelect}\n\t\t\tvalue={selectedItem}\n\t\t>\n\t\t\t{ optionNames.map(createOption) }\n\t\t</select>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}