{"ast":null,"code":"var _jsxFileName = \"/home/mark/GIT/exp-tree/src/ExpView.tsx\";\n// React Component: ExpView. \n\n// visual representation of boolean expressions - done in such a way as to enable \n// the dynamic construction of complex nested expressions (and, or, not ...), \n// to an arbitrary depth, including allowing undefined elements and the use of boolean constants.\n\n// provides the UI side of Exp.ts - recursively displaying and enabling the modification \n// at any point in the expressions hierarchy.\n\nimport { assert } from './utils';\nimport { ExpNodePartView } from './ExpNodePartView';\n\n// boolean expressions - types(classes), Exp constants, operator values (also constants) and T, F, U values.\nimport { NotExp, AndExp, OrExp, NandExp, NorExp, XorExp, XOR_OP, NAND_OP, NOR_OP, UNDEF_EXP, TRUE_EXP, FALSE_EXP, NOT_OP, AND_OP, OR_OP, UNDEF, TRUE, FALSE } from './Exp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const displayUniExp = (expv, updateAppCalculations) => {\n  let e = expv;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lhs-indent\",\n      children: /*#__PURE__*/_jsxDEV(ExpView, {\n        exp: e.getSubExp(),\n        parentUpdateCb: e.setSubExp,\n        requestAppStateBeUpdatedCb: updateAppCalculations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n};\nexport const displayBinExp = (expv, updateAppCalculations) => {\n  let e = expv;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lhs-indent\",\n      children: /*#__PURE__*/_jsxDEV(ExpView, {\n        exp: e.getLhsExp(),\n        parentUpdateCb: e.setLhsExp,\n        requestAppStateBeUpdatedCb: updateAppCalculations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lhs-indent\",\n      children: /*#__PURE__*/_jsxDEV(ExpView, {\n        exp: e.getRhsExp(),\n        parentUpdateCb: e.setRhsExp,\n        requestAppStateBeUpdatedCb: updateAppCalculations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this);\n};\nexport const displayNoSubExp = (e, updateAppCalculations) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n// exported to enable module extension externally.\n\nconst expFactory = {\n  [UNDEF]: {\n    exp: () => UNDEF_EXP,\n    display: displayNoSubExp\n  },\n  [TRUE]: {\n    exp: () => TRUE_EXP,\n    display: displayNoSubExp\n  },\n  [FALSE]: {\n    exp: () => FALSE_EXP,\n    display: displayNoSubExp\n  },\n  [NOT_OP]: {\n    exp: () => new NotExp(),\n    display: displayUniExp\n  },\n  [AND_OP]: {\n    exp: () => new AndExp(),\n    display: displayBinExp\n  },\n  [OR_OP]: {\n    exp: () => new OrExp(),\n    display: displayBinExp\n  },\n  [NAND_OP]: {\n    exp: () => new NandExp(),\n    display: displayBinExp\n  },\n  [NOR_OP]: {\n    exp: () => new NorExp(),\n    display: displayBinExp\n  },\n  [XOR_OP]: {\n    exp: () => new XorExp(),\n    display: displayBinExp\n  }\n};\n;\nexport function ExpView(props) {\n  console.log(`ExpView Fn Render, props.exp: ${props.exp.name()}`);\n  const handleSelectionFromDropDownMenu = value => {\n    const e = expFactory[value].exp();\n    props.parentUpdateCb(e);\n    console.log(`ExpView updated parent with: ${e.name()}`);\n    props.requestAppStateBeUpdatedCb(); // React *cannot* do this automatically!\n  };\n\n  const viewToDisplay = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bdr md-font exp-width\",\n      children: /*#__PURE__*/_jsxDEV(ExpNodePartView, {\n        options: Object.keys(expFactory),\n        onSelect: handleSelectionFromDropDownMenu,\n        selected: props.exp.name()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this), expFactory[props.exp.name()].display(props.exp, props.requestAppStateBeUpdatedCb)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this);\n  return viewToDisplay;\n}\n\n// enable extension of module externally.\n_c = ExpView;\nexport function extendExpFactory(name, behaviour) {\n  assert(expFactory[name] === undefined); // pre-conditions check.\n  expFactory[name] = behaviour;\n}\nvar _c;\n$RefreshReg$(_c, \"ExpView\");","map":{"version":3,"names":["assert","ExpNodePartView","NotExp","AndExp","OrExp","NandExp","NorExp","XorExp","XOR_OP","NAND_OP","NOR_OP","UNDEF_EXP","TRUE_EXP","FALSE_EXP","NOT_OP","AND_OP","OR_OP","UNDEF","TRUE","FALSE","displayUniExp","expv","updateAppCalculations","e","getSubExp","setSubExp","displayBinExp","getLhsExp","setLhsExp","getRhsExp","setRhsExp","displayNoSubExp","expFactory","exp","display","ExpView","props","console","log","name","handleSelectionFromDropDownMenu","value","parentUpdateCb","requestAppStateBeUpdatedCb","viewToDisplay","Object","keys","extendExpFactory","behaviour","undefined"],"sources":["/home/mark/GIT/exp-tree/src/ExpView.tsx"],"sourcesContent":["// React Component: ExpView. \n\n// visual representation of boolean expressions - done in such a way as to enable \n// the dynamic construction of complex nested expressions (and, or, not ...), \n// to an arbitrary depth, including allowing undefined elements and the use of boolean constants.\n\n// provides the UI side of Exp.ts - recursively displaying and enabling the modification \n// at any point in the expressions hierarchy.\n\nimport { assert } from './utils';\nimport { ExpNodePartView } from './ExpNodePartView';\n\n// boolean expressions - types(classes), Exp constants, operator values (also constants) and T, F, U values.\nimport { \n\tExp, BinExp, NotExp, AndExp, OrExp, NandExp, NorExp, XorExp, XOR_OP, NAND_OP, NOR_OP, UNDEF_EXP, TRUE_EXP, \n\tFALSE_EXP, NOT_OP, AND_OP, OR_OP, UNDEF, TRUE, FALSE\n} from './Exp';\n\nexport const displayUniExp = (expv: Exp, updateAppCalculations: () => void): JSX.Element => {\n\tlet e = expv as NotExp;\n\treturn (\n\t\t<div>\n\t\t\t<div />\n\t\t\t<div className='lhs-indent'>\n\t\t\t\t<ExpView\n\t\t\t\t\texp={e.getSubExp()}\n\t\t\t\t\tparentUpdateCb={e.setSubExp}\n\t\t\t\t\trequestAppStateBeUpdatedCb={updateAppCalculations}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport const displayBinExp = (expv: Exp, updateAppCalculations: () => void): JSX.Element => {\n\tlet e = expv as BinExp;\n\treturn (\n\t\t<div>\n\t\t\t<div className='lhs-indent'>\n\t\t\t\t<ExpView\n\t\t\t\t\texp={e.getLhsExp()}\n\t\t\t\t\tparentUpdateCb={e.setLhsExp}\n\t\t\t\t\trequestAppStateBeUpdatedCb={updateAppCalculations}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div />\n\t\t\t<div className='lhs-indent'>\n\t\t\t\t<ExpView\n\t\t\t\t\texp={e.getRhsExp()}\n\t\t\t\t\tparentUpdateCb={e.setRhsExp}\n\t\t\t\t\trequestAppStateBeUpdatedCb={updateAppCalculations}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport const displayNoSubExp = (e: Exp, updateAppCalculations: () => void): JSX.Element => {\n\treturn <p></p>;\n}\n\n// exported to enable module extension externally.\nexport type ExpNameSpecificBehaviour = { exp: () => Exp, display: (e: Exp, appCalc: () => void) => JSX.Element };\ntype ExpNameToBehaviourMap = { [index: string]: ExpNameSpecificBehaviour };\n\nconst expFactory = {\n\t[UNDEF]: \t\t{ exp: () => UNDEF_EXP, \tdisplay: displayNoSubExp },\n\t[TRUE]: \t\t{ exp: () => TRUE_EXP, \t\tdisplay: displayNoSubExp },\n\t[FALSE]: \t\t{ exp: () => FALSE_EXP, \tdisplay: displayNoSubExp },\n\t[NOT_OP]: \t\t{ exp: () => new NotExp(), \tdisplay: displayUniExp },\n\t[AND_OP]: \t\t{ exp: () => new AndExp(), \tdisplay: displayBinExp },\n\t[OR_OP]: \t\t{ exp: () => new OrExp(), \tdisplay: displayBinExp },\n\t[NAND_OP]: \t\t{ exp: () => new NandExp(), display: displayBinExp },\n\t[NOR_OP]: \t\t{ exp: () => new NorExp(), \tdisplay: displayBinExp },\n\t[XOR_OP]: \t\t{ exp: () => new XorExp(), \tdisplay: displayBinExp }\n} as ExpNameToBehaviourMap;\n\ninterface Props {\n\t// as shown in 'this' instance of ExpView.\n\texp: \t\t\t\t\t\tExp;\n\tparentUpdateCb: \t\t\t(e: Exp) => Exp;\n\trequestAppStateBeUpdatedCb: () => void;\n};\n\nexport function ExpView(props: Props) {\n\tconsole.log(`ExpView Fn Render, props.exp: ${props.exp.name()}`)\n\n\tconst handleSelectionFromDropDownMenu = (value: string) => {\n\t\tconst e = expFactory[value].exp();\n\t\tprops.parentUpdateCb(e);\n\t\tconsole.log(`ExpView updated parent with: ${e.name()}`)\n\t\tprops.requestAppStateBeUpdatedCb(); // React *cannot* do this automatically!\n\t}\n\n\tconst viewToDisplay = \n\t\t<div>\n\t\t\t<div className='bdr md-font exp-width'>\n\t\t\t\t<ExpNodePartView \n\t\t\t\t\toptions=\t{ Object.keys(expFactory) }\n\t\t\t\t\tonSelect=\t{ handleSelectionFromDropDownMenu }\n\t\t\t\t\tselected=\t{ props.exp.name() }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div/>\n\t\t\t{expFactory[props.exp.name()].display(props.exp, props.requestAppStateBeUpdatedCb)}\n\t\t</div>\n\n\treturn viewToDisplay;\n}\n\n// enable extension of module externally.\nexport function extendExpFactory( name: string, behaviour: ExpNameSpecificBehaviour )\n{\n\tassert(expFactory[name] === undefined);\t// pre-conditions check.\n\texpFactory[name] = behaviour;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}