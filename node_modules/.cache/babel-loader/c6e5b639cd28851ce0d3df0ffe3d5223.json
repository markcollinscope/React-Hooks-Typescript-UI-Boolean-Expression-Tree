{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";// Shows the UI 'node' part of an Exp,  \n// (the box on the UI with the name of the operator or constant, in it) e.g. \n// |And   |, |Xor   | |True  |, etc.\n// These 'nodes'also have an associated drop-down menu, which enables a new node\n// to be selected to replace the current.\nexport function ExpNodePartView(props){var optionNames=props.options;var selectedItem=optionNames.indexOf(props.selected);// naughty ... (the 'any' here - forgive me!)\nvar handleSelect=function handleSelect(event){event.preventDefault();var value=parseInt(event.target.value);var optionChosen=optionNames[value];props.onSelect(optionChosen);};var createOption=function createOption(s,k){return/*#__PURE__*/_jsx(\"option\",{className:'option-txt md-font',value:k,children:s},k);};return/*#__PURE__*/_jsx(\"select\",{className:\"option-txt md-font\",size:1,onChange:handleSelect,value:selectedItem,children:optionNames.map(createOption)});}","map":{"version":3,"names":["ExpNodePartView","props","optionNames","options","selectedItem","indexOf","selected","handleSelect","event","preventDefault","value","parseInt","target","optionChosen","onSelect","createOption","s","k","map"],"sources":["/home/mark/GIT/exp-tree/src/ExpNodePartView.tsx"],"sourcesContent":["// Shows the UI 'node' part of an Exp,  \n// (the box on the UI with the name of the operator or constant, in it) e.g. \n// |And   |, |Xor   | |True  |, etc.\n// These 'nodes'also have an associated drop-down menu, which enables a new node\n// to be selected to replace the current.\n\ninterface Props\n{\t\n\tonSelect:\t(s: string) => void;\n\toptions:\tstring[];\n\tselected:\tstring;\n}\n\nexport function ExpNodePartView(props: Props)\n{\n\tconst optionNames = props.options;\n\tconst selectedItem = optionNames.indexOf(props.selected);\n\t\n\t// naughty ... (the 'any' here - forgive me!)\n\tconst handleSelect = (event: any): void =>\n\t{\n\t\tevent.preventDefault();\n\t\tlet value = parseInt(event.target.value) as number;\n\n\t\tconst optionChosen = optionNames[value];\n\t\tprops.onSelect(optionChosen);\n\t}\n\n\tconst createOption = (s: string, k: number) =>\n\t{\n\t\treturn (\n\t\t\t<option\n\t\t\t\tclassName={'option-txt md-font'}\n\t\t\t\tkey={k}\n\t\t\t\tvalue={k}\n\t\t\t> \n\t\t\t\t{s} \n\t\t\t</option>\n\t\t);\n\t}\n\n\treturn (\n\t\t<select className='option-txt md-font'\n\t\t\tsize={1} \n\t\t\tonChange={handleSelect}\n\t\t\tvalue={selectedItem}\n\t\t>\n\t\t\t{ optionNames.map(createOption) }\n\t\t</select>\n\t);\n}\n"],"mappings":"2CAAA;AACA;AACA;AACA;AACA;AASA,MAAO,SAASA,gBAAe,CAACC,KAAY,CAC5C,CACC,GAAMC,YAAW,CAAGD,KAAK,CAACE,OAAO,CACjC,GAAMC,aAAY,CAAGF,WAAW,CAACG,OAAO,CAACJ,KAAK,CAACK,QAAQ,CAAC,CAExD;AACA,GAAMC,aAAY,CAAG,QAAfA,aAAY,CAAIC,KAAU,CAChC,CACCA,KAAK,CAACC,cAAc,EAAE,CACtB,GAAIC,MAAK,CAAGC,QAAQ,CAACH,KAAK,CAACI,MAAM,CAACF,KAAK,CAAW,CAElD,GAAMG,aAAY,CAAGX,WAAW,CAACQ,KAAK,CAAC,CACvCT,KAAK,CAACa,QAAQ,CAACD,YAAY,CAAC,CAC7B,CAAC,CAED,GAAME,aAAY,CAAG,QAAfA,aAAY,CAAIC,CAAS,CAAEC,CAAS,CAC1C,CACC,mBACC,eACC,SAAS,CAAE,oBAAqB,CAEhC,KAAK,CAAEA,CAAE,UAERD,CAAC,EAHGC,CAAC,CAIE,CAEX,CAAC,CAED,mBACC,eAAQ,SAAS,CAAC,oBAAoB,CACrC,IAAI,CAAE,CAAE,CACR,QAAQ,CAAEV,YAAa,CACvB,KAAK,CAAEH,YAAa,UAElBF,WAAW,CAACgB,GAAG,CAACH,YAAY,CAAC,EACvB,CAEX"},"metadata":{},"sourceType":"module"}