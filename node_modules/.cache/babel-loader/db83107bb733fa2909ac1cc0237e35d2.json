{"ast":null,"code":"var _jsxFileName = \"/home/mark/GIT/exp-tree/src/ExpView.tsx\";\n// React Component: ExpView. \n// visual representation of boolean expressions - done in such a way as to enable \n// the dynamic construction of complex nested expressions (and, or, not ...), \n// to an arbitrary depth, including allowing undefined elements and the use of boolean constants.\n// provides the UI side of Exp.ts - recursively displaying and enabling the modification \n// at any point in the expressions hierarchy.\nimport { assert } from './utils';\nimport { ExpNodePartView } from './ExpNodePartView'; // boolean expressions - types(classes), Exp constants, operator values (also constants) and T, F, U values.\n\nimport { NotExp, AndExp, OrExp, NandExp, NorExp, XorExp, XOR_OP, NAND_OP, NOR_OP, UNDEF_EXP, TRUE_EXP, FALSE_EXP, NOT_OP, AND_OP, OR_OP, UNDEF, TRUE, FALSE } from './Exp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const displayUniExp = (expv, updateAppCalculations) => {\n  let e = expv;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lhs-indent\",\n      children: /*#__PURE__*/_jsxDEV(ExpView, {\n        exp: e.getSubExp(),\n        parentUpdateCb: e.setSubExp,\n        requestAppStateBeUpdatedCb: updateAppCalculations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n};\nexport const displayBinExp = (expv, updateAppCalculations) => {\n  let e = expv;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lhs-indent\",\n      children: /*#__PURE__*/_jsxDEV(ExpView, {\n        exp: e.getLhsExp(),\n        parentUpdateCb: e.setLhsExp,\n        requestAppStateBeUpdatedCb: updateAppCalculations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lhs-indent\",\n      children: /*#__PURE__*/_jsxDEV(ExpView, {\n        exp: e.getRhsExp(),\n        parentUpdateCb: e.setRhsExp,\n        requestAppStateBeUpdatedCb: updateAppCalculations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this);\n};\nexport const displayNoSubExp = (e, updateAppCalculations) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}; // exported to enable module extension externally.\n\nconst expFactory = {\n  [UNDEF]: {\n    exp: () => UNDEF_EXP,\n    display: displayNoSubExp\n  },\n  [TRUE]: {\n    exp: () => TRUE_EXP,\n    display: displayNoSubExp\n  },\n  [FALSE]: {\n    exp: () => FALSE_EXP,\n    display: displayNoSubExp\n  },\n  [NOT_OP]: {\n    exp: () => new NotExp(),\n    display: displayUniExp\n  },\n  [AND_OP]: {\n    exp: () => new AndExp(),\n    display: displayBinExp\n  },\n  [OR_OP]: {\n    exp: () => new OrExp(),\n    display: displayBinExp\n  },\n  [NAND_OP]: {\n    exp: () => new NandExp(),\n    display: displayBinExp\n  },\n  [NOR_OP]: {\n    exp: () => new NorExp(),\n    display: displayBinExp\n  },\n  [XOR_OP]: {\n    exp: () => new XorExp(),\n    display: displayBinExp\n  }\n};\n;\nexport function ExpView(props) {\n  console.log(`ExpView Fn Render, props.exp: ${props.exp.name()}`);\n\n  const handleSelectionFromDropDownMenu = value => {\n    const e = expFactory[value].exp();\n    props.parentUpdateCb(e);\n    console.log(`ExpView updated parent with: ${e.name()}`);\n    props.requestAppStateBeUpdatedCb(); // React *cannot* do this automatically!\n  };\n\n  const viewToDisplay = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bdr md-font exp-width\",\n      children: /*#__PURE__*/_jsxDEV(ExpNodePartView, {\n        options: Object.keys(expFactory),\n        onSelect: handleSelectionFromDropDownMenu,\n        selected: props.exp.name()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this), expFactory[props.exp.name()].display(props.exp, props.requestAppStateBeUpdatedCb)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this);\n\n  return viewToDisplay;\n} // enable extension of module externally.\n\n_c = ExpView;\nexport function extendExpFactory(name, behaviour) {\n  assert(expFactory[name] === undefined); // pre-conditions check.\n\n  expFactory[name] = behaviour;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpView\");","map":{"version":3,"sources":["/home/mark/GIT/exp-tree/src/ExpView.tsx"],"names":["assert","ExpNodePartView","NotExp","AndExp","OrExp","NandExp","NorExp","XorExp","XOR_OP","NAND_OP","NOR_OP","UNDEF_EXP","TRUE_EXP","FALSE_EXP","NOT_OP","AND_OP","OR_OP","UNDEF","TRUE","FALSE","displayUniExp","expv","updateAppCalculations","e","getSubExp","setSubExp","displayBinExp","getLhsExp","setLhsExp","getRhsExp","setRhsExp","displayNoSubExp","expFactory","exp","display","ExpView","props","console","log","name","handleSelectionFromDropDownMenu","value","parentUpdateCb","requestAppStateBeUpdatedCb","viewToDisplay","Object","keys","extendExpFactory","behaviour","undefined"],"mappings":";AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA,SAASA,MAAT,QAAuB,SAAvB;AACA,SAASC,eAAT,QAAgC,mBAAhC,C,CAEA;;AACA,SACcC,MADd,EACsBC,MADtB,EAC8BC,KAD9B,EACqCC,OADrC,EAC8CC,MAD9C,EACsDC,MADtD,EAC8DC,MAD9D,EACsEC,OADtE,EAC+EC,MAD/E,EACuFC,SADvF,EACkGC,QADlG,EAECC,SAFD,EAEYC,MAFZ,EAEoBC,MAFpB,EAE4BC,KAF5B,EAEmCC,KAFnC,EAE0CC,IAF1C,EAEgDC,KAFhD,QAGO,OAHP;;AAKA,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAYC,qBAAZ,KAA+D;AAC3F,MAAIC,CAAC,GAAGF,IAAR;AACA,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACC,QAAC,OAAD;AACC,QAAA,GAAG,EAAEE,CAAC,CAACC,SAAF,EADN;AAEC,QAAA,cAAc,EAAED,CAAC,CAACE,SAFnB;AAGC,QAAA,0BAA0B,EAAEH;AAH7B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAYA,CAdM;AAgBP,OAAO,MAAMI,aAAa,GAAG,CAACL,IAAD,EAAYC,qBAAZ,KAA+D;AAC3F,MAAIC,CAAC,GAAGF,IAAR;AACA,sBACC;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACC,QAAC,OAAD;AACC,QAAA,GAAG,EAAEE,CAAC,CAACI,SAAF,EADN;AAEC,QAAA,cAAc,EAAEJ,CAAC,CAACK,SAFnB;AAGC,QAAA,0BAA0B,EAAEN;AAH7B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAQC;AAAA;AAAA;AAAA;AAAA,YARD,eASC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACC,QAAC,OAAD;AACC,QAAA,GAAG,EAAEC,CAAC,CAACM,SAAF,EADN;AAEC,QAAA,cAAc,EAAEN,CAAC,CAACO,SAFnB;AAGC,QAAA,0BAA0B,EAAER;AAH7B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YATD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA,CArBM;AAuBP,OAAO,MAAMS,eAAe,GAAG,CAACR,CAAD,EAASD,qBAAT,KAA4D;AAC1F,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CAFM,C,CAIP;;AAIA,MAAMU,UAAU,GAAG;AAClB,GAACf,KAAD,GAAW;AAAEgB,IAAAA,GAAG,EAAE,MAAMtB,SAAb;AAAyBuB,IAAAA,OAAO,EAAEH;AAAlC,GADO;AAElB,GAACb,IAAD,GAAU;AAAEe,IAAAA,GAAG,EAAE,MAAMrB,QAAb;AAAyBsB,IAAAA,OAAO,EAAEH;AAAlC,GAFQ;AAGlB,GAACZ,KAAD,GAAW;AAAEc,IAAAA,GAAG,EAAE,MAAMpB,SAAb;AAAyBqB,IAAAA,OAAO,EAAEH;AAAlC,GAHO;AAIlB,GAACjB,MAAD,GAAY;AAAEmB,IAAAA,GAAG,EAAE,MAAM,IAAI/B,MAAJ,EAAb;AAA4BgC,IAAAA,OAAO,EAAEd;AAArC,GAJM;AAKlB,GAACL,MAAD,GAAY;AAAEkB,IAAAA,GAAG,EAAE,MAAM,IAAI9B,MAAJ,EAAb;AAA4B+B,IAAAA,OAAO,EAAER;AAArC,GALM;AAMlB,GAACV,KAAD,GAAW;AAAEiB,IAAAA,GAAG,EAAE,MAAM,IAAI7B,KAAJ,EAAb;AAA2B8B,IAAAA,OAAO,EAAER;AAApC,GANO;AAOlB,GAACjB,OAAD,GAAa;AAAEwB,IAAAA,GAAG,EAAE,MAAM,IAAI5B,OAAJ,EAAb;AAA4B6B,IAAAA,OAAO,EAAER;AAArC,GAPK;AAQlB,GAAChB,MAAD,GAAY;AAAEuB,IAAAA,GAAG,EAAE,MAAM,IAAI3B,MAAJ,EAAb;AAA4B4B,IAAAA,OAAO,EAAER;AAArC,GARM;AASlB,GAAClB,MAAD,GAAY;AAAEyB,IAAAA,GAAG,EAAE,MAAM,IAAI1B,MAAJ,EAAb;AAA4B2B,IAAAA,OAAO,EAAER;AAArC;AATM,CAAnB;AAiBC;AAED,OAAO,SAASS,OAAT,CAAiBC,KAAjB,EAA+B;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCF,KAAK,CAACH,GAAN,CAAUM,IAAV,EAAiB,EAA9D;;AAEA,QAAMC,+BAA+B,GAAIC,KAAD,IAAmB;AAC1D,UAAMlB,CAAC,GAAGS,UAAU,CAACS,KAAD,CAAV,CAAkBR,GAAlB,EAAV;AACAG,IAAAA,KAAK,CAACM,cAAN,CAAqBnB,CAArB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAa,gCAA+Bf,CAAC,CAACgB,IAAF,EAAS,EAArD;AACAH,IAAAA,KAAK,CAACO,0BAAN,GAJ0D,CAItB;AACpC,GALD;;AAOA,QAAMC,aAAa,gBAClB;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,6BACC,QAAC,eAAD;AACC,QAAA,OAAO,EAAIC,MAAM,CAACC,IAAP,CAAYd,UAAZ,CADZ;AAEC,QAAA,QAAQ,EAAIQ,+BAFb;AAGC,QAAA,QAAQ,EAAIJ,KAAK,CAACH,GAAN,CAAUM,IAAV;AAHb;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAQC;AAAA;AAAA;AAAA;AAAA,YARD,EASEP,UAAU,CAACI,KAAK,CAACH,GAAN,CAAUM,IAAV,EAAD,CAAV,CAA6BL,OAA7B,CAAqCE,KAAK,CAACH,GAA3C,EAAgDG,KAAK,CAACO,0BAAtD,CATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;;AAaA,SAAOC,aAAP;AACA,C,CAED;;KA1BgBT,O;AA2BhB,OAAO,SAASY,gBAAT,CAA2BR,IAA3B,EAAyCS,SAAzC,EACP;AACChD,EAAAA,MAAM,CAACgC,UAAU,CAACO,IAAD,CAAV,KAAqBU,SAAtB,CAAN,CADD,CACyC;;AACxCjB,EAAAA,UAAU,CAACO,IAAD,CAAV,GAAmBS,SAAnB;AACA","sourcesContent":["// React Component: ExpView. \n\n// visual representation of boolean expressions - done in such a way as to enable \n// the dynamic construction of complex nested expressions (and, or, not ...), \n// to an arbitrary depth, including allowing undefined elements and the use of boolean constants.\n\n// provides the UI side of Exp.ts - recursively displaying and enabling the modification \n// at any point in the expressions hierarchy.\n\nimport { assert } from './utils';\nimport { ExpNodePartView } from './ExpNodePartView';\n\n// boolean expressions - types(classes), Exp constants, operator values (also constants) and T, F, U values.\nimport { \n\tExp, BinExp, NotExp, AndExp, OrExp, NandExp, NorExp, XorExp, XOR_OP, NAND_OP, NOR_OP, UNDEF_EXP, TRUE_EXP, \n\tFALSE_EXP, NOT_OP, AND_OP, OR_OP, UNDEF, TRUE, FALSE\n} from './Exp';\n\nexport const displayUniExp = (expv: Exp, updateAppCalculations: () => void): JSX.Element => {\n\tlet e = expv as NotExp;\n\treturn (\n\t\t<div>\n\t\t\t<div />\n\t\t\t<div className='lhs-indent'>\n\t\t\t\t<ExpView\n\t\t\t\t\texp={e.getSubExp()}\n\t\t\t\t\tparentUpdateCb={e.setSubExp}\n\t\t\t\t\trequestAppStateBeUpdatedCb={updateAppCalculations}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport const displayBinExp = (expv: Exp, updateAppCalculations: () => void): JSX.Element => {\n\tlet e = expv as BinExp;\n\treturn (\n\t\t<div>\n\t\t\t<div className='lhs-indent'>\n\t\t\t\t<ExpView\n\t\t\t\t\texp={e.getLhsExp()}\n\t\t\t\t\tparentUpdateCb={e.setLhsExp}\n\t\t\t\t\trequestAppStateBeUpdatedCb={updateAppCalculations}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div />\n\t\t\t<div className='lhs-indent'>\n\t\t\t\t<ExpView\n\t\t\t\t\texp={e.getRhsExp()}\n\t\t\t\t\tparentUpdateCb={e.setRhsExp}\n\t\t\t\t\trequestAppStateBeUpdatedCb={updateAppCalculations}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport const displayNoSubExp = (e: Exp, updateAppCalculations: () => void): JSX.Element => {\n\treturn <p></p>;\n}\n\n// exported to enable module extension externally.\nexport type ExpNameSpecificBehaviour = { exp: () => Exp, display: (e: Exp, appCalc: () => void) => JSX.Element };\ntype ExpNameToBehaviourMap = { [index: string]: ExpNameSpecificBehaviour };\n\nconst expFactory = {\n\t[UNDEF]: \t\t{ exp: () => UNDEF_EXP, \tdisplay: displayNoSubExp },\n\t[TRUE]: \t\t{ exp: () => TRUE_EXP, \t\tdisplay: displayNoSubExp },\n\t[FALSE]: \t\t{ exp: () => FALSE_EXP, \tdisplay: displayNoSubExp },\n\t[NOT_OP]: \t\t{ exp: () => new NotExp(), \tdisplay: displayUniExp },\n\t[AND_OP]: \t\t{ exp: () => new AndExp(), \tdisplay: displayBinExp },\n\t[OR_OP]: \t\t{ exp: () => new OrExp(), \tdisplay: displayBinExp },\n\t[NAND_OP]: \t\t{ exp: () => new NandExp(), display: displayBinExp },\n\t[NOR_OP]: \t\t{ exp: () => new NorExp(), \tdisplay: displayBinExp },\n\t[XOR_OP]: \t\t{ exp: () => new XorExp(), \tdisplay: displayBinExp }\n} as ExpNameToBehaviourMap;\n\ninterface Props {\n\t// as shown in 'this' instance of ExpView.\n\texp: \t\t\t\t\t\tExp;\n\tparentUpdateCb: \t\t\t(e: Exp) => Exp;\n\trequestAppStateBeUpdatedCb: () => void;\n};\n\nexport function ExpView(props: Props) {\n\tconsole.log(`ExpView Fn Render, props.exp: ${props.exp.name()}`)\n\n\tconst handleSelectionFromDropDownMenu = (value: string) => {\n\t\tconst e = expFactory[value].exp();\n\t\tprops.parentUpdateCb(e);\n\t\tconsole.log(`ExpView updated parent with: ${e.name()}`)\n\t\tprops.requestAppStateBeUpdatedCb(); // React *cannot* do this automatically!\n\t}\n\n\tconst viewToDisplay = \n\t\t<div>\n\t\t\t<div className='bdr md-font exp-width'>\n\t\t\t\t<ExpNodePartView \n\t\t\t\t\toptions=\t{ Object.keys(expFactory) }\n\t\t\t\t\tonSelect=\t{ handleSelectionFromDropDownMenu }\n\t\t\t\t\tselected=\t{ props.exp.name() }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div/>\n\t\t\t{expFactory[props.exp.name()].display(props.exp, props.requestAppStateBeUpdatedCb)}\n\t\t</div>\n\n\treturn viewToDisplay;\n}\n\n// enable extension of module externally.\nexport function extendExpFactory( name: string, behaviour: ExpNameSpecificBehaviour )\n{\n\tassert(expFactory[name] === undefined);\t// pre-conditions check.\n\texpFactory[name] = behaviour;\n}\n"]},"metadata":{},"sourceType":"module"}