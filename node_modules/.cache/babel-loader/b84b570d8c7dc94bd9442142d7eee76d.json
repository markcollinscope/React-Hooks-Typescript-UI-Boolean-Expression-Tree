{"ast":null,"code":"import _createClass from\"/home/mark/GIT/exp-tree/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"/home/mark/GIT/exp-tree/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _inherits from\"/home/mark/GIT/exp-tree/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/mark/GIT/exp-tree/node_modules/@babel/runtime/helpers/esm/createSuper.js\";// Extend the basic behaviour of the application without changing any core source code.\n// Very arguably, this module should be split into two - a) EqExp class b) eqExtension related. \n// As they are different concerns...\n// However, left like this for now.\nimport{BinExp,DEFAULT_EXP}from'./Exp';import{displayBinExp,extendExpFactory}from'./ExpView';// Example: EQ operator True IFF  a EQ b - i.e. same value.\nexport var EQ_OP='==';export var EqExp=/*#__PURE__*/function(_BinExp){_inherits(EqExp,_BinExp);var _super=_createSuper(EqExp);function EqExp(){var _this;var lhs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_EXP;var rhs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_EXP;_classCallCheck(this,EqExp);_this=_super.call(this,EQ_OP,lhs,rhs);_this.calc=function(){return _this.getLhsExp().calc()===_this.getRhsExp().calc();};return _this;}return _createClass(EqExp);}(BinExp);var eqExtension={exp:function exp(){return new EqExp();},display:displayBinExp};export function eqExtensionFn(){extendExpFactory(EQ_OP,eqExtension);}","map":{"version":3,"names":["BinExp","DEFAULT_EXP","displayBinExp","extendExpFactory","EQ_OP","EqExp","lhs","rhs","calc","getLhsExp","getRhsExp","eqExtension","exp","display","eqExtensionFn"],"sources":["/home/mark/GIT/exp-tree/src/extendExp.ts"],"sourcesContent":["// Extend the basic behaviour of the application without changing any core source code.\r\n\r\n// Very arguably, this module should be split into two - a) EqExp class b) eqExtension related. \r\n// As they are different concerns...\r\n// However, left like this for now.\r\n\r\nimport { Exp, BinExp, DEFAULT_EXP } from './Exp';\r\nimport { displayBinExp, extendExpFactory } from './ExpView';\r\n\r\n// Example: EQ operator True IFF  a EQ b - i.e. same value.\r\n\r\nexport const EQ_OP = '==' as string;\r\nexport class EqExp extends BinExp \r\n{\r\n\tconstructor(lhs: Exp = DEFAULT_EXP, rhs: Exp = DEFAULT_EXP) { super (EQ_OP, lhs, rhs); }\r\n\tcalc = () => this.getLhsExp().calc() === this.getRhsExp().calc();\r\n}\r\n\r\nconst  eqExtension = { exp: () => new EqExp(), display: displayBinExp }\r\n\r\nexport function eqExtensionFn()\r\n{\r\n    extendExpFactory(EQ_OP, eqExtension);\r\n}\r\n"],"mappings":"oaAAA;AAEA;AACA;AACA;AAEA,OAAcA,MAAM,CAAEC,WAAW,KAAQ,OAAO,CAChD,OAASC,aAAa,CAAEC,gBAAgB,KAAQ,WAAW,CAE3D;AAEA,MAAO,IAAMC,MAAK,CAAG,IAAc,CACnC,UAAaC,MAAK,wFAEjB,gBAA4D,cAAhDC,IAAQ,2DAAGL,WAAW,IAAEM,IAAQ,2DAAGN,WAAW,6BAAI,uBAAOG,KAAK,CAAEE,GAAG,CAAEC,GAAG,EAAE,MACtFC,IAAI,CAAG,iBAAM,OAAKC,SAAS,EAAE,CAACD,IAAI,EAAE,GAAK,MAAKE,SAAS,EAAE,CAACF,IAAI,EAAE,gBADuB,CAAC,6BAF9DR,MAAM,EAMjC,GAAOW,YAAW,CAAG,CAAEC,GAAG,CAAE,qBAAM,IAAIP,MAAK,EAAE,GAAEQ,OAAO,CAAEX,aAAc,CAAC,CAEvE,MAAO,SAASY,cAAa,EAC7B,CACIX,gBAAgB,CAACC,KAAK,CAAEO,WAAW,CAAC,CACxC"},"metadata":{},"sourceType":"module"}