{"ast":null,"code":"var _jsxFileName = \"/home/mark/GIT/exp-tree/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// import { lg } from './utils';\n// UI (Interface).\nimport { useState } from 'react';\nimport { ExpView } from './ExpView'; // Domain.\n\nimport { UNDEF_EXP, NotExp, uBoolToName } from './Exp';\n/* \tdummyRoot(Exp) is the parent of the actual Exp to be shown.\n    \n    (App)         (has dropdown)\n    dummyRoot ---> visibleRoot-------------------------> xxxExp ... etc.\n                       |-------------------------------> xxxExp ... etc.     \n\t\n\tdummyRoot enables the visibleRoot to be changed dynamically - something has to 'hold it' in reference form\n\tfor this to happen. Selecting a new option (from the dropdown menu of visibleRoot) changes the visibleRoot\n\tby updating the reference held in dummyRoot (or another Exp node if deeper in an expression hierarchy).\n\n\tthere are other possible approaches... this is a bit of a classic comp-sci solution.\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DummyRoot extends NotExp {}\n\nfunction App() {\n  _s();\n\n  const visibleRoot = () => dummyRoot.getSubExp();\n\n  const calcRes = e => uBoolToName(e.calc()); // all state.\n\n\n  const [dummyRoot] = useState(new DummyRoot(UNDEF_EXP));\n  const [res, setRes] = useState(calcRes(visibleRoot()));\n  const [textExp, setTextExp] = useState(visibleRoot().expand());\n\n  const updateVisibleRoot = newExp => {\n    dummyRoot.setSubExp(newExp);\n    updateCalcResultsArea();\n    return newExp;\n  };\n\n  const updateCalcResultsArea = () => {\n    setRes(calcRes(visibleRoot()));\n    setTextExp(visibleRoot().expand());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"red tal bm lg-font\",\n      children: [\"De-luxe Boolean Expression Calculator\", /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"md-font\",\n        children: \"for all your boolean evaluation needs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"resultsArea\",\n      className: \"orange bm\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tal lg-font flex-horiz\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"exp-width\",\n          children: \"Expression:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: textExp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tal lg-font flex-horiz bm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"exp-width\",\n          children: \"Result:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: res\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"expressionArea\",\n      children: /*#__PURE__*/_jsxDEV(ExpView, {\n        exp: visibleRoot(),\n        parentUpdateCb: updateVisibleRoot,\n        requestAppStateBeUpdatedCb: updateCalcResultsArea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"otrFbnvsYzWwBOgHBL1eASHAI5M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mark/GIT/exp-tree/src/App.tsx"],"names":["useState","ExpView","UNDEF_EXP","NotExp","uBoolToName","DummyRoot","App","visibleRoot","dummyRoot","getSubExp","calcRes","e","calc","res","setRes","textExp","setTextExp","expand","updateVisibleRoot","newExp","setSubExp","updateCalcResultsArea"],"mappings":";;;AAAA;AAEA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CAEA;;AACA,SAASC,SAAT,EAAyBC,MAAzB,EAAiCC,WAAjC,QAAoD,OAApD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,SAAN,SAAwBF,MAAxB,CAA+B;;AAE/B,SAASG,GAAT,GACA;AAAA;;AACC,QAAMC,WAAW,GAAG,MAAMC,SAAS,CAACC,SAAV,EAA1B;;AACA,QAAMC,OAAO,GAAIC,CAAD,IAAYP,WAAW,CAACO,CAAC,CAACC,IAAF,EAAD,CAAvC,CAFD,CAIC;;;AACA,QAAM,CAACJ,SAAD,IAAmBR,QAAQ,CAAC,IAAIK,SAAJ,CAAcH,SAAd,CAAD,CAAjC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAmBd,QAAQ,CAACU,OAAO,CAACH,WAAW,EAAZ,CAAR,CAAjC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAyBhB,QAAQ,CAACO,WAAW,GAAGU,MAAd,EAAD,CAAvC;;AAEA,QAAMC,iBAAiB,GAAIC,MAAD,IAC1B;AACCX,IAAAA,SAAS,CAACY,SAAV,CAAoBD,MAApB;AACAE,IAAAA,qBAAqB;AACrB,WAAOF,MAAP;AACA,GALD;;AAOA,QAAME,qBAAqB,GAAG,MAAM;AACnCP,IAAAA,MAAM,CAACJ,OAAO,CAACH,WAAW,EAAZ,CAAR,CAAN;AACAS,IAAAA,UAAU,CAACT,WAAW,GAAGU,MAAd,EAAD,CAAV;AACA,GAHD;;AAKA,sBACC;AAAA,4BACC;AAAQ,MAAA,SAAS,EAAC,oBAAlB;AAAA,uEAEC;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAMC;AAAS,MAAA,EAAE,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAC,WAApC;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA,gCACC;AAAG,UAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAA,oBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAKC;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,gCACC;AAAG,UAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAA,oBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cALD;AAAA;AAAA;AAAA;AAAA;AAAA,YAND,eAiBC;AAAS,MAAA,EAAE,EAAC,gBAAZ;AAAA,6BACC,QAAC,OAAD;AACC,QAAA,GAAG,EAAEN,WAAW,EADjB;AAEC,QAAA,cAAc,EAAEW,iBAFjB;AAGC,QAAA,0BAA0B,EAAEG;AAH7B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAjBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA2BA;;GAjDQf,G;;KAAAA,G;AAkDT,eAAeA,GAAf","sourcesContent":["// import { lg } from './utils';\n\n// UI (Interface).\nimport { useState } from 'react';\nimport { ExpView } from './ExpView';\n\n// Domain.\nimport { UNDEF_EXP, Exp, NotExp, uBoolToName } from './Exp'\n\n/* \tdummyRoot(Exp) is the parent of the actual Exp to be shown.\n    \n    (App)         (has dropdown)\n    dummyRoot ---> visibleRoot-------------------------> xxxExp ... etc.\n                       |-------------------------------> xxxExp ... etc.     \n\t\n\tdummyRoot enables the visibleRoot to be changed dynamically - something has to 'hold it' in reference form\n\tfor this to happen. Selecting a new option (from the dropdown menu of visibleRoot) changes the visibleRoot\n\tby updating the reference held in dummyRoot (or another Exp node if deeper in an expression hierarchy).\n\n\tthere are other possible approaches... this is a bit of a classic comp-sci solution.\n*/\n\nclass DummyRoot extends NotExp {}\n\nfunction App()\n{\n\tconst visibleRoot = () => dummyRoot.getSubExp();\n\tconst calcRes = (e: Exp) => uBoolToName(e.calc());\n\n\t// all state.\n\tconst [dummyRoot,] \t\t\t\t= useState(new DummyRoot(UNDEF_EXP)); \n\tconst [res, setRes] \t\t\t= useState(calcRes(visibleRoot()));\n\tconst [textExp, setTextExp] \t= useState(visibleRoot().expand());\n\n\tconst updateVisibleRoot = (newExp: Exp) =>\n\t{\n\t\tdummyRoot.setSubExp(newExp);\n\t\tupdateCalcResultsArea();\n\t\treturn newExp;\n\t}\n\n\tconst updateCalcResultsArea = () => {\n\t\tsetRes(calcRes(visibleRoot()));\n\t\tsetTextExp(visibleRoot().expand());\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<header className=\"red tal bm lg-font\">\n\t\t\t\tDe-luxe Boolean Expression Calculator\n\t\t\t\t<p className='md-font'>for all your boolean evaluation needs</p>\n\t\t\t</header>\n\n\t\t\t<section id='resultsArea' className='orange bm'>\n\t\t\t\t<div className='tal lg-font flex-horiz'>\n\t\t\t\t\t<p className='exp-width'>Expression:</p> \n\t\t\t\t\t<p>{textExp}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className='tal lg-font flex-horiz bm'>\n\t\t\t\t\t<p className='exp-width'>Result:</p> \n\t\t\t\t\t<p>{res}</p>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t<section id='expressionArea'>\n\t\t\t\t<ExpView\n\t\t\t\t\texp={visibleRoot()}\n\t\t\t\t\tparentUpdateCb={updateVisibleRoot}\n\t\t\t\t\trequestAppStateBeUpdatedCb={updateCalcResultsArea}\n\t\t\t\t/>\n\t\t\t</section>\n\t\t</div>\n\t);\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}