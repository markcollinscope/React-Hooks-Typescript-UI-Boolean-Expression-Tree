{"ast":null,"code":"// Extend the basic behaviour of the application without changing any core source code.\n// Very arguably, this module should be split into two - a) EqExp class b) eqExtension related. \n// As they are different concerns...\n// However, left like this for now.\nimport { BinExp, DEFAULT_EXP } from './Exp';\nimport { displayBinExp, extendExpFactory } from './ExpView'; // Example: EQ operator True IFF  a EQ b - i.e. same value.\n\nexport const EQ_OP = '==';\nexport class EqExp extends BinExp {\n  constructor() {\n    let lhs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_EXP;\n    let rhs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_EXP;\n    super(EQ_OP, lhs, rhs);\n\n    this.calc = () => this.getLhsExp().calc() === this.getRhsExp().calc();\n  }\n\n}\nconst eqExtension = {\n  exp: () => new EqExp(),\n  display: displayBinExp\n};\nexport function eqExtensionFn() {\n  extendExpFactory(EQ_OP, eqExtension);\n}","map":{"version":3,"sources":["/home/mark/GIT/exp-tree/src/extendExp.ts"],"names":["BinExp","DEFAULT_EXP","displayBinExp","extendExpFactory","EQ_OP","EqExp","constructor","lhs","rhs","calc","getLhsExp","getRhsExp","eqExtension","exp","display","eqExtensionFn"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA,SAAcA,MAAd,EAAsBC,WAAtB,QAAyC,OAAzC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,WAAhD,C,CAEA;;AAEA,OAAO,MAAMC,KAAK,GAAG,IAAd;AACP,OAAO,MAAMC,KAAN,SAAoBL,MAApB,CACP;AACCM,EAAAA,WAAW,GAAiD;AAAA,QAAhDC,GAAgD,uEAArCN,WAAqC;AAAA,QAAxBO,GAAwB,uEAAbP,WAAa;AAAE,UAAOG,KAAP,EAAcG,GAAd,EAAmBC,GAAnB;;AAAF,SAC5DC,IAD4D,GACrD,MAAM,KAAKC,SAAL,GAAiBD,IAAjB,OAA4B,KAAKE,SAAL,GAAiBF,IAAjB,EADmB;AAA4B;;AADzF;AAKA,MAAOG,WAAW,GAAG;AAAEC,EAAAA,GAAG,EAAE,MAAM,IAAIR,KAAJ,EAAb;AAA0BS,EAAAA,OAAO,EAAEZ;AAAnC,CAArB;AAEA,OAAO,SAASa,aAAT,GACP;AACIZ,EAAAA,gBAAgB,CAACC,KAAD,EAAQQ,WAAR,CAAhB;AACH","sourcesContent":["// Extend the basic behaviour of the application without changing any core source code.\r\n\r\n// Very arguably, this module should be split into two - a) EqExp class b) eqExtension related. \r\n// As they are different concerns...\r\n// However, left like this for now.\r\n\r\nimport { Exp, BinExp, DEFAULT_EXP } from './Exp';\r\nimport { displayBinExp, extendExpFactory } from './ExpView';\r\n\r\n// Example: EQ operator True IFF  a EQ b - i.e. same value.\r\n\r\nexport const EQ_OP = '==' as string;\r\nexport class EqExp extends BinExp \r\n{\r\n\tconstructor(lhs: Exp = DEFAULT_EXP, rhs: Exp = DEFAULT_EXP) { super (EQ_OP, lhs, rhs); }\r\n\tcalc = () => this.getLhsExp().calc() === this.getRhsExp().calc();\r\n}\r\n\r\nconst  eqExtension = { exp: () => new EqExp(), display: displayBinExp }\r\n\r\nexport function eqExtensionFn()\r\n{\r\n    extendExpFactory(EQ_OP, eqExtension);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}